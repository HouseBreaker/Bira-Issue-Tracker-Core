@model IEnumerable<BiraIssueTrackerCore.Web.Models.IssueTracker.IssueViewModel>

<table id="issues" class="table table-striped table-bordered table-responsive">
	<thead>
	<tr>
		<th>
			@Html.DisplayNameFor(model => model.Title)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Description)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.State)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.AuthorEmail)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.AssigneeEmail)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Date)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Tags)
		</th>
		<th>
			Quick actions
		</th>
	</tr>
	</thead>

	@foreach (var issue in Model)
	{
		<tr>
			<td>
				@issue.Title
			</td>
			<td>
				@issue.Description
			</td>
			<td>
				@issue.State
			</td>
			<td>
				<a asp-controller="Users" asp-action="Profile" asp-route-id="@issue.AuthorEmail">@issue.AuthorEmail</a>
			</td>
			<td>
				<a asp-controller="Users" asp-action="Profile" asp-route-id="@issue.AssigneeEmail">@issue.AssigneeEmail</a>
			</td>
			<td>
				@Html.DisplayFor(modelItem => issue.Date)
			</td>
			<td>
				@if (issue.Tags != null)
				{
					foreach (var tag in issue.Tags)
					{
						<a asp-controller="Issues" asp-action="Tagged" asp-route-id="{tag.Slug}" class="btn btn-xs btn-default">@tag.Name</a>
					}
				}
			</td>
			<td>
				<!-- TODO: add back dynamic action buttons -->

				<div class="btn-group flex">
					<a asp-action="Details" asp-route-id="@issue.Id" class="btn btn-primary">Details</a>
					
					@{ var dropdownStateAttribute = !issue.UserIsAssignee && !issue.UserIsAuthor ? "disabled" : "";}

					<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" @dropdownStateAttribute>
						<span class="caret"></span>
						<span class="sr-only">Toggle Dropdown</span>
					</button>

					@if (issue.UserIsAssignee || issue.UserIsAuthor)
					{
						<ul class="dropdown-menu">
							@{
								var linkText = issue.UserIsAssignee && !issue.UserIsAuthor ? "Change state" : "Edit";
							}

							<li>
								<a asp-action="Edit" asp-route-id="issue.Id">@linkText</a>
							</li>

							@if (issue.UserIsAuthor)
							{
								<li>
									<a asp-action="Delete" asp-route-id="issue.Id">Delete</a>
								</li>
							}
						</ul>
					}

				</div>
			</td>
		</tr>
	}
</table>

@*@functions
	{

		private string CurrentActionName()
		{
			return ViewContext.RouteData.Values["action"].ToString();
		}

	}

	<table id="issues" class="table table-striped table-bordered table-responsive">
		<thead>
			<tr>
				<th>
					@Html.DisplayNameFor(model => model.Title)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.Description)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.State)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.Author)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.Assignee)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.Date)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.IssueTags)
				</th>
				<th>
					Quick actions
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model)
			{
				<tr>
					<td>
						@Html.DisplayFor(modelItem => item.Title)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Description)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.State)
					</td>
					<td>
						@Html.ActionLink(item.Author.Email, "Profile", "Users", new { id = item.Author.Email }, null)
					</td>
					<td>
						@Html.ActionLink(item.Assignee.Email, "Profile", "Users", new { id = item.Assignee.Email }, null)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Date)
					</td>

					<td>
						@if (item.Tags != null)
						{
							var tagLinks = new List<string>();
							foreach (var tag in item.Tags)
							{
								tagLinks.Add(Html.ActionLink(tag.Name, "Tagged", "Issues", new { id = tag.Slug }, null).ToHtmlString());
							}

							var tagsHtml = string.Join(", ", tagLinks);
							@Html.Raw(tagsHtml)
					}
					</td>
					<td>
						@{
							var userIsAssignedIssue = item.Assignee.Id == User.Identity.GetUserId();
							var userIsAuthor = item.Author.Id == User.Identity.GetUserId();
							var userIsAdmin = User.IsInRole("Administrators");
							var userAuthorizedToEdit = userIsAssignedIssue || userIsAuthor || userIsAdmin;

							var disabledButtonClass = userAuthorizedToEdit ? string.Empty : "disabled";
						}
						<div class="btn-group flex">
							@Html.ActionLink("Details", "Details", "Issues", new { id = item.Id, returnTo = CurrentActionName() }, new { @class = "btn btn-primary" })
							<button type="button" class="btn btn-primary dropdown-toggle @disabledButtonClass" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
								<span class="caret"></span>
								<span class="sr-only">Toggle Dropdown</span>
							</button>
							@if (userAuthorizedToEdit)
							{
								<ul class="dropdown-menu">

									@{
										var linkText = (userIsAssignedIssue && !userIsAuthor) && !userIsAdmin ? "Change state" : "Edit";
									}

									<li>@Html.ActionLink(linkText, "Edit", "Issues", new { id = item.Id, returnTo = CurrentActionName() }, null)</li>

									@if (userIsAuthor || userIsAdmin)
									{
										<li>@Html.ActionLink("Delete", "Delete", "Issues", new { id = item.Id, returnTo = CurrentActionName() }, null)</li>
									}
								</ul>
										}

						</div>
					</td>
				</tr>
										}
		</tbody>
	</table>


	@Scripts.Render("~/Scripts/jquery.dataTables.min.js")
	@Scripts.Render("~/Scripts/dataTables.bootstrap.js")
	@Scripts.Render("~/Scripts/tableSort.js")*@